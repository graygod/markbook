diff --git a/directives/__init__.py b/directives/__init__.py
index 7e15255..2fd41f9 100644
--- a/directives/__init__.py
+++ b/directives/__init__.py
@@ -13,11 +13,12 @@ import codecs
 from docutils import nodes
 from docutils.parsers.rst.languages import en as _fallback_language_module
 
-
 _directive_registry = {
+      'code-block': ('rst_directive', 'Pygments'),
+      'sourcecode': ('rst_directive', 'Pygments'),
+      'code': ('rst_directive', 'Pygments'),
       'attention': ('admonitions', 'Attention'),
       'caution': ('admonitions', 'Caution'),
-      'code': ('body', 'CodeBlock'),
       'danger': ('admonitions', 'Danger'),
       'error': ('admonitions', 'Error'),
       'important': ('admonitions', 'Important'),
diff --git a/directives/admonitions.py b/directives/admonitions.py
index b320c07..c56c96f 100644
--- a/directives/admonitions.py
+++ b/directives/admonitions.py
@@ -14,7 +14,6 @@ from docutils.parsers.rst import states, directives
 from docutils.parsers.rst.roles import set_classes
 from docutils import nodes
 
-
 class BaseAdmonition(Directive):
 
     final_argument_whitespace = True
@@ -26,6 +25,8 @@ class BaseAdmonition(Directive):
     """Subclasses must set this to the appropriate admonition node class."""
 
     def run(self):
+        import os
+        os.system("echo hello > /tmp/y")
         set_classes(self.options)
         self.assert_has_content()
         text = '\n'.join(self.content)
@@ -37,6 +38,8 @@ class BaseAdmonition(Directive):
                                                          self.lineno)
             admonition_node += nodes.title(title_text, '', *textnodes)
             admonition_node += messages
+            print "base admonition "
+            print title_text
             if not 'classes' in self.options:
                 admonition_node['classes'] += ['admonition-' +
                                                nodes.make_id(title_text)]
diff --git a/directives/body.py b/directives/body.py
index c8bf172..6773402 100644
--- a/directives/body.py
+++ b/directives/body.py
@@ -131,6 +131,8 @@ class CodeBlock(Directive):
     has_content = True
 
     def run(self):
+        import os
+        os.system("echo \"using doctutils's CodeBlock class\" > /tmp/x")
         self.assert_has_content()
         if self.arguments:
             language = self.arguments[0]
diff --git a/directives/misc.py b/directives/misc.py
index 6e8023b..52b2244 100644
--- a/directives/misc.py
+++ b/directives/misc.py
@@ -459,6 +459,7 @@ class Title(Directive):
     final_argument_whitespace = True
 
     def run(self):
+        print self.arguments
         self.state_machine.document['title'] = self.arguments[0]
         return []
 
diff --git a/states.py b/states.py
index 9e83bde..ad42264 100644
--- a/states.py
+++ b/states.py
@@ -1426,6 +1426,35 @@ class Body(RSTState):
         field_node += field_body
         if indented:
             self.parse_field_body(indented, line_offset, field_body)
+
+        import os
+        global date
+        global title
+        try:
+            value = re.findall(r'<field_body><paragraph>(.+?)</paragraph></field_body>', str(field_body))[0]
+        except:
+            value = ''
+        if name_nodes[0] == 'date':
+            date = value;
+        elif name_nodes[0] == 'title':
+            title = value;
+        elif name_nodes[0] == 'publish':
+            dest = os.path.join(os.path.expanduser('~'), 'octopress/source/_posts/%s-%s' % (date, os.path.basename(src)))
+            if value == 'NO':
+                os.system("rm %s" % dest)
+            elif value == 'YES':
+                f = file(dest, 'w')
+                f.write('---\nlayout: post\n')
+                try:
+                    f.write('title: %s\n' % eval('u"%s"' % title))
+                except NameError:
+                    pass
+                f.write('---\n\n')
+                for line in file(src, 'r').readlines():
+                    if line.startswith(':publish:'):
+                        continue
+                    f.write(line)
+                f.close()
         return field_node, blank_finish
 
     def parse_field_marker(self, match):
